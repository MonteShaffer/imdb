X = removeColumnsFromDataFrame(protein,"Country");
methods = c("complete", "average", "single", "median", "centroid", "ward.D", "ward.D2", "mcquitty");
for(method in methods)
{
time.start = Sys.time();
X.hclust = hclust( dist(X), method=method);
plot(X.hclust);
time.end = Sys.time();
elapse = round( as.numeric(time.end) - as.numeric(time.start), digits=3);
print(paste0(elapse, "seconds to complete method", method));
}
# should we scale the data?
X = removeColumnsFromDataFrame(protein,"Country");
methods = c("complete", "average", "single", "median", "centroid", "ward.D", "ward.D2", "mcquitty");
for(method in methods)
{
time.start = Sys.time();
X.hclust = hclust( dist(X), method=method);
plot(X.hclust);
time.end = Sys.time();
elapse = sprintf("%.3f", as.numeric(time.end) - as.numeric(time.start));
print(paste0(elapse, " secs to complete method ... ", method));
}
# should we scale the data?
X = removeColumnsFromDataFrame(protein,"Country");
rownames(X) = protein$Country;
methods = c("complete", "average", "single", "median", "centroid", "ward.D", "ward.D2", "mcquitty");
for(method in methods)
{
time.start = Sys.time();
X.hclust = hclust( dist(X), method=method);
plot(X.hclust);
time.end = Sys.time();
elapse = sprintf("%.3f", as.numeric(time.end) - as.numeric(time.start));
print(paste0(elapse, " secs to complete method ... ", method));
}
str(X.clust)
str(X.hclust)
?dist
library(pvclust);
install.packages("pvclust", dependencies=TRUE);
library(pvclust);  # install.packages("pvclust", dependencies=TRUE);
protein.t
str(protein.t);
colnames(protein.t);
rownames(protein.t);
?pvclust
# should we scale the data?
X = removeColumnsFromDataFrame(protein,"Country");
rownames(X) = protein$Country;
methods = c("complete", "average", "single", "median", "centroid", "ward.D", "ward.D2", "mcquitty");
for(method in methods)
{
time.start = Sys.time();
X.hclust = hclust( dist(X), method=method);
plot(X.hclust);
time.end = Sys.time();
elapse = sprintf("%.3f", as.numeric(time.end) - as.numeric(time.start));
print(paste0(elapse, " secs to complete method ... ", method));
}
library(pvclust);  # install.packages("pvclust", dependencies=TRUE);
# pvclust uses "bootstrapping" to analyze the stability of the hclust.  For some reason, you have to transpose the data inputs to still "cluster" by country.
for(method in methods)
{
time.start = Sys.time();
X.pvclust = pvclust ( protein.t, method.hclust=method);
plot(X.pvclust);
pvrect(X.pvclust);
time.end = Sys.time();
elapse = sprintf("%.3f", as.numeric(time.end) - as.numeric(time.start));
print(paste0(elapse, " secs to complete method ... ", method));
}
knitr::opts_chunk$set(echo = TRUE);
knitr::opts_chunk$set(warning = FALSE);
knitr::opts_chunk$set(message = FALSE);
## this should knit, but I am running some IMDB stuff
## so I wasn't able to verify a final Knit.
## please let me know in the Discussion Board if you
## find any errors, and I will fix
library(humanVerseWSU);
# You need R tools for this to work:  https://cran.r-project.org/bin/windows/Rtools/
# You may want to see if you have the latest version...
# library(devtools);
# detach(package:humanVerseWSU);
# install_github("MonteShaffer/humanVerseWSU/humanVerseWSU");
# Choose (3) None to minimize headaches ....
# library(humanVerseWSU);
example.datasets.path = "C:/Users/Alexander Nevsky/Dropbox/WSU-419/Fall 2020/__student_access__/sample_latex_files/Multivariate-2009/datasets/";
# https://www.codebus.net/d-2oZ.html
protein.file = paste0(example.datasets.path,"protein.txt");
protein = read.table(protein.file);
row = protein[1,];
colnames(protein) = row;
protein = protein[-c(1),];
protein;
# why would I do this?
protein.file2 = paste0(example.datasets.path,"pipe-format/protein.txt");
write.table( protein , file=protein.file2, quote=FALSE, col.names=TRUE, row.names=FALSE, sep="|");
protein = read.csv(protein.file2, header=TRUE, quote="", sep="|");
protein;
round( dist( removeColumnsFromDataFrame(protein,"Country") ), digits=2);
round( cor( removeColumnsFromDataFrame(protein,"Country") ), digits=2);
cols = colnames(protein);
rows = protein$Country;
df = removeColumnsFromDataFrame(protein,"Country");
df.t = transposeMatrix(df);
colnames(df.t) = rows;
protein.t = as.data.frame(df.t);
protein.t;
dist(protein.t);
#round( cor( protein.t ), digits=2);
# should we scale the data?
X = removeColumnsFromDataFrame(protein,"Country");
rownames(X) = protein$Country;
methods = c("complete", "average", "single", "median", "centroid", "ward.D", "ward.D2", "mcquitty");
for(method in methods)
{
time.start = Sys.time();
X.hclust = hclust( dist(X), method=method);
plot(X.hclust);
time.end = Sys.time();
elapse = sprintf("%.3f", as.numeric(time.end) - as.numeric(time.start));
print(paste0(elapse, " secs to complete method ... ", method));
}
library(pvclust);  # install.packages("pvclust", dependencies=TRUE);
# pvclust uses "bootstrapping" to analyze the stability of the hclust.  For some reason, you have to transpose the data inputs to still "cluster" by country.
# nboot=1000 ... is it 1000 times slower?
for(method in methods)
{
time.start = Sys.time();
X.pvclust = pvclust ( protein.t, method.hclust=method);
plot(X.pvclust);
pvrect(X.pvclust);
time.end = Sys.time();
elapse = sprintf("%.3f", as.numeric(time.end) - as.numeric(time.start));
print(paste0(elapse, " secs to complete method ... ", method));
}
r = seq(0.5,1.4,by=.1);
r;
length(r);
16.448/1000
Xs = scaled(X);
Xs = scale(X);
car.file = paste0(example.datasets.path,"MBA_CAR_ATTRIB.txt");
mba.cars = na.omit(read.table(car.file,na.strings='.'));
car.file = paste0(example.datasets.path,"MBA_CAR_ATTRIB.txt");
mba.cars = na.omit(read.table(car.file,na.strings='.'));
str(mba.cars);
myAttributes = c("Exciting", "Dependable", "Luxurious",
"Outdoorsy", "Powerful", "Stylish",
"Comfortable", "Rugged", "Fun",
"Safe", "Performance", "Family",
"Versatile", "Sports", "Status",
"Practical");
car.file = paste0(example.datasets.path,"MBA_CAR_ATTRIB.txt");
mba.cars = na.omit(read.table(car.file,na.strings='.'));
myAttributes = c("Exciting", "Dependable", "Luxurious",
"Outdoorsy", "Powerful", "Stylish",
"Comfortable", "Rugged", "Fun",
"Safe", "Performance", "Family",
"Versatile", "Sports", "Status",
"Practical");
rownames(mba.cars) = myAttributes;
cars = removeColumnsFromDataFrame(mba.cars,"V1");
colnames(cars) = myAttributes;
str(cars);
cars = mba.cars[,3:18];
colnames(cars) = myAttributes;
str(cars);
car.file = paste0(example.datasets.path,"MBA_CAR_ATTRIB.txt");
mba.cars = na.omit(read.table(car.file,na.strings='.'));
myAttributes = c("Exciting", "Dependable", "Luxurious",
"Outdoorsy", "Powerful", "Stylish",
"Comfortable", "Rugged", "Fun",
"Safe", "Performance", "Family",
"Versatile", "Sports", "Status",
"Practical");
car.ids = mba.cars$V1;
cars = mba.cars[,3:18];
colnames(cars) = myAttributes;
rownames(cars) = car.ids;
head(cars);
length(cars)
dim(cars)
library(datasets);
data(iris);
head(iris);
dim(iris);
ndf = replaceFactorColumnWithIndicatorVariables(iris, "Species", "is");
head(ndf);
dim(ndf);
ndf = replaceFactorColumnWithIndicatorVariables(iris, "Species", "is", FALSE);
head(ndf);
dim(ndf);
source('C:/_git_/MonteShaffer/humanVerseWSU/humanVerseWSU/R/functions-dataframe.R', echo=TRUE)
library(datasets);
data(iris);
head(iris);
dim(iris);
ndf = replaceFactorColumnWithIndicatorVariables(iris, "Species", "is");
head(ndf);
dim(ndf);
ndf = replaceFactorColumnWithIndicatorVariables(iris, "Species", "is", FALSE);
head(ndf);
dim(ndf);
source('C:/_git_/MonteShaffer/humanVerseWSU/humanVerseWSU/R/functions-str.R', echo=TRUE)
library(datasets);
data(iris);
head(iris);
dim(iris);
ndf = replaceFactorColumnWithIndicatorVariables(iris, "Species", "is");
head(ndf);
dim(ndf);
ndf = replaceFactorColumnWithIndicatorVariables(iris, "Species", "is", FALSE);
head(ndf);
dim(ndf);
View(ndf)
library(humanVerseWSU);
loadDataIMDB();
source('C:/_git_/MonteShaffer/humanVerseWSU/humanVerseWSU/R/functions-imdb.R', echo=TRUE)
loadDataIMDB()
devtools::document();
library(devtools);
library(humanVerseWSU);
detach(package:humanVerseWSU);
install_github("MonteShaffer/humanVerseWSU/humanVerseWSU");
library(devtools);
install_github("MonteShaffer/humanVerseWSU/humanVerseWSU");
library(humanVerseWSU);
?loadDataIMDB
loadDataIMDB();
str(imdb.data);
dim(imdb.data$movies$all)
length(imdb.data$movies$all)
head(imdb.data$movies$all)
tail(imdb.data$movies$all)
dim(imdb.data$all.actors.movies);
IMDB.getMovieInfo("tt0000001");
source('C:/_git_/MonteShaffer/humanVerseWSU/humanVerseWSU/R/functions-imdb.R', echo=TRUE)
IMDB.getMovieInfo("tt0000001");
# the movie info we grab from the ActorSearch
# length(imdb.data$movies$all); # 74520
# dim(imdb.data$all.actors.movies); # 282062
# IMDB.getMovieInfo("tt0000001");
IMDB.getMovieInfo = function(ttid, return.cols=NULL, imdb=imdb.data$all.actors.movies)
{
info = imdb[imdb$ttid == ttid, ];
if(is.null(return.cols)) { info; } else { info[, return.cols]; }
}
IMDB.getMovieInfo("tt0000001");
IMDB.getMovieInfo("tt2302755");
IMDB.getMovieInfo = function(ttid, return.cols=NULL, imdb=imdb.data$all.actors.movies)
{
info = na.omit( imdb[imdb$ttid == ttid, ] ) ;
if(is.null(return.cols)) { info; } else { info[, return.cols]; }
}
IMDB.getMovieInfo("tt2302755");
IMDB.getMovieInfo("tt0038650", return.cols=1:5);
IMDB.getPersonInfo("nm0000005");
IMDB.getPersonInfo("nm0000005", 1:4);
IMDB.getPersonInfo("nm0000005", c("name"));
IMDB.getPersonInfo("nm0000005", c("name","bio"));
nmid = "nm0000005";
return.cols=NULL
imdb=imdb.data
info = imdb$all.actors.rank[imdb$all.actors.rank$nmid == nmid, ];
info
info.more = merge(info, imdb$all.actors.movies, by="ttid");
info.even.more = merge(info.more, imdb$all.movies.actors.characters, by="ttid");
View(info.even.more)
nmidinfo.even.more = merge(info.more, imdb$all.movies.actors.characters, by="nmid");
info.even.more = merge(info.more, imdb$all.movies.actors.characters, by="nmid");
info = imdb$all.actors.rank[imdb$all.actors.rank$nmid == nmid, ];
# character name here as well?
# https://www.datasciencemadesimple.com/join-in-r-merge-in-r/
info.more = merge(info, imdb$all.actors.movies, by="ttid");
info.even.more = merge(info.more, imdb$all.movies.actors.characters, by="nmid");
View(info.even.more)
str(imdb$all.movies.actors.characters)
characters = imdb$all.movies.actors.characters[
imdb$all.movies.actors.characters$nmid == nmid,];
characters
str(info.more)
View(info.more)
IMDB.getMoviesForPerson = function(nmid, return.cols=NULL, imdb=imdb.data)
{
# $all.actors.movies
# $$all.actors.rank
# inner join with rank / character names ??
# movies info, just a few cols ...
info = imdb$all.actors.rank[imdb$all.actors.rank$nmid == nmid, ];
# character name here as well?  From a different dataset ...
# https://www.datasciencemadesimple.com/join-in-r-merge-in-r/
info.more = merge(info, imdb$all.actors.movies, by="ttid");
#characters = imdb$all.movies.actors.characters[
imdb$all.movies.actors.characters$nmid == nmid,];
#info.even.more = merge(info.more, imdb$all.movies.actors.characters, by="nmid");
if(is.null(return.cols)) { info.more; } else { info.more[, return.cols]; }
}
# IMDB.getMoviesForPerson("nm0000005", 1:5);
IMDB.getMoviesForPerson = function(nmid, return.cols=NULL, imdb=imdb.data)
{
# $all.actors.movies
# $$all.actors.rank
# inner join with rank / character names ??
# movies info, just a few cols ...
info = imdb$all.actors.rank[imdb$all.actors.rank$nmid == nmid, ];
# character name here as well?  From a different dataset ...
# https://www.datasciencemadesimple.com/join-in-r-merge-in-r/
info.more = merge(info, imdb$all.actors.movies, by="ttid");
#characters = imdb$all.movies.actors.characters[
#                 imdb$all.movies.actors.characters$nmid == nmid,];
#info.even.more = merge(info.more, imdb$all.movies.actors.characters, by="nmid");
if(is.null(return.cols)) { info.more; } else { info.more[, return.cols]; }
}
dim(imdb.data$all.actors.info);
dim(imdb$all.actors.movies);
dim(imdb$all.actors.rank);
str(imdb$all.actors.rank);
:: IMDB.getMoviesForPerson = function(nmid, return.cols=NULL, imdb=imdb.data)
{
# $all.actors.movies
# $$all.actors.rank
# inner join with rank / character names ??
# movies info, just a few cols ...
info = imdb$all.actors.rank[imdb$all.actors.rank$nmid == nmid, ];
# character name here as well?  From a different dataset ...
# https://www.datasciencemadesimple.com/join-in-r-merge-in-r/
info.more = merge(info, imdb$all.actors.movies, by="ttid");
#characters = imdb$all.movies.actors.characters[
#                 imdb$all.movies.actors.characters$nmid == nmid,];
#info.even.more = merge(info.more, imdb$all.movies.actors.characters, by="nmid");
if(is.null(return.cols)) { info.more; } else { info.more[, return.cols]; }
}
IMDB.getMoviesForPerson = function(nmid, return.cols=NULL, imdb=imdb.data)
{
# $all.actors.movies
# $$all.actors.rank
# inner join with rank / character names ??
# movies info, just a few cols ...
info = imdb$all.actors.rank[imdb$all.actors.rank$nmid == nmid, ];
# character name here as well?  From a different dataset ...
# https://www.datasciencemadesimple.com/join-in-r-merge-in-r/
info.more = merge(info, imdb$all.actors.movies, by="ttid");
#characters = imdb$all.movies.actors.characters[
#                 imdb$all.movies.actors.characters$nmid == nmid,];
#info.even.more = merge(info.more, imdb$all.movies.actors.characters, by="nmid");
if(is.null(return.cols)) { info.more; } else { info.more[, return.cols]; }
}
IMDB.getMoviesForPerson("nm0000005");
IMDB.getMoviesForPerson("nm0000005", 1:4);
IMDB.getMoviesForPerson("nm0000005", 1:5);
IMDB.getMoviesForPerson("nm0000005", c("year","title"));
IMDB.getMoviesForPerson("nm0000005", c("year","title","ttid"));
str(info.more);
info.more = sortDataFrameByNumericColumns(info.more,"rank");
View(info.more)
info.more = sortDataFrameByNumericColumns(info.more,"rank", "ASC");
View(info.more)
IMDB.getMoviesForPerson = function(nmid, return.cols=NULL, imdb=imdb.data)
{
# $all.actors.movies
# $$all.actors.rank
# inner join with rank / character names ??
# movies info, just a few cols ...
info = imdb$all.actors.rank[imdb$all.actors.rank$nmid == nmid, ];
# character name here as well?  From a different dataset ...
# https://www.datasciencemadesimple.com/join-in-r-merge-in-r/
info.more = merge(info, imdb$all.actors.movies, by="ttid");
#characters = imdb$all.movies.actors.characters[
#                 imdb$all.movies.actors.characters$nmid == nmid,];
#info.even.more = merge(info.more, imdb$all.movies.actors.characters, by="nmid");
info.more = sortDataFrameByNumericColumns(info.more,"rank", "ASC");
if(is.null(return.cols)) { info.more; } else { info.more[, return.cols]; }
}
IMDB.getMoviesForPerson("nm0000071");
IMDB.getMoviesForPerson("nm0000071", 1:5);
IMDB.getMoviesForPerson("nm0000071", c("title","year","ttid","rank"));
IMDB.searchPersonName("Frank Oz");
IMDB.searchPersonName("Frank Oz", 1:4);
IMDB.searchPersonName("Frank Oz", 1:4);
IMDB.searchPersonName = function(str, return.cols=NULL, ignore.case=TRUE, perl=FALSE, imdb=imdb.data$all.actors.info)
{
grx = utils::glob2rx(str);  # https://stackoverflow.com/questions/5823503/
grx.grep = grep(grx,imdb$name, ignore.case=ignore.case, perl=perl);
rows = imdb[grx.grep, ];
if(is.null(return.cols)) { rows; } else { rows[, return.cols]; }
}
IMDB.searchPersonName("Frank Oz", 1:4);
IMDB.searchPersonName("Sean*", c("nmid","name","where.born") );
IMDB.searchPersonName("Frank Oz", return.cols=1:4);
IMDB.searchPersonName("Sean*", return.cols=c("nmid","name","where.born") );
IMDB.searchPersonName("Frank Oz");
IMDB.searchPersonName("Frank Oz", 1:4);
IMDB.searchPersonName("Sean*", c("nmid","name","born.where") );
IMDB.searchPersonName("*monte*", ignore.case=FALSE);
IMDB.searchPersonName("*monte*", 1:3, ignore.case=FALSE);
IMDB.searchPersonName("*monte*", 1:2, ignore.case=FALSE);
IMDB.searchPersonName("*monte*", 1:2, ignore.case=TRUE);
IMDB.searchPersonName("*monte*", 1:2, ignore.case=FALSE);
IMDB.searchPersonName("Denzel*", return.cols=1:4);
IMDB.searchPersonName("Denzel*", c(1,2,4) );
IMDB.genericSearch("*Kentucky*", "bio", 1:3);
IMDB.genericSearch = function(str, col.name, return.cols=NULL, ignore.case=TRUE, perl=FALSE, imdb=imdb.data$all.actors.info)
{
grx = utils::glob2rx(str);  # https://stackoverflow.com/questions/5823503/
grx.grep = grep(grx,imdb[col.name][[1]], ignore.case=ignore.case, perl=perl);
rows = imdb[grx.grep, ];
if(is.null(return.cols)) { rows; } else { rows[, return.cols]; }
}
IMDB.genericSearch("*Kentucky*", "bio", 1:3);
IMDB.genericSearch("*Kentucky*", "bio", 1:2);
IMDB.genericSearch("*Kentucky*", "born.where", 1:2);
IMDB.genericSearch("*Montana*", "born.where", 1:2);
IMDB.genericSearch("*Seattle*", "born.where", 1:2);
actors = list();
actors$all = readRDS(
system.file("extdata", "imdb/all.actors.rds", package="humanVerseWSU") );
length(actors$all);
length(actors$popular50);
length(imdb.data$actors$popular50);
length(imdb.data$actors$gem50);
length(imdb.data$actors$headliners);
length(imdb.data$actors$top250);
length(imdb.data$actors$nm5000);
length(imdb.data$actors$tt5000);
length(imdb.data$movies$all);
length(imdb.data$movies$popular50);
dim(imdb.data$movies$popular50);
dim(imdb.data$movies$gem50);
dim(imdb.data$movies$gem50);
length(imdb.data$movies$top250);
length(imdb.data$movies$tt5000);
setdiff(imdb.data$movies$gem50, imdb.data$movies$popular50);
setdiff(imdb.data$movies$gem50$ttid, imdb.data$movies$popular50$ttid);
head(imdb.data$movies$gem50);
head(imdb.data$movies$popular50);
dim(imdb.data$headliners$companies);
dim(imdb.data$headliners$directors);
dim(imdb.data$headliners$writers);
dim(imdb.data$headliners$actors);
str(imdb.data$headliners);
length(imdb.data$headliners$companies);
length(imdb.data$headliners$directors);
length(imdb.data$headliners$writers);
length(imdb.data$headliners$actors);
dim(imdb.data$glue$movies.creatives);
dim(imdb.data$all.movies.creatives);
dim(imdb.data$all.movies.companies);
dim(imdb.data$all.movies.actors.characters);
dim(imdb.data$all.actors.rank);
dim(imdb.data$all.actors.movies);
dim(imdb.data$all.actors.info);
dim(imdb.data$moviecount.byyear);
str(imdb.data$all.actors.movies);
IMDB.searchMovieTitle = function(str, return.cols=NULL, ignore.case=TRUE, perl=FALSE, imdb=imdb.data$all.actors.movies)
{
grx = utils::glob2rx(str);  # https://stackoverflow.com/questions/5823503/
grx.grep = grep(grx,imdb$title, ignore.case=ignore.case, perl=perl);
rows = imdb[grx.grep, ];
if(is.null(return.cols)) { rows; } else { rows[, return.cols]; }
}
str(imdb.data$all.actors.movies);
IMDB.genericSearch("*Montana*", "paragraph", 1:2, imdb=imdb.data$all.actors.movies);
IMDB.genericSearch("*Montana*", "paragraph", 1:3, imdb=imdb.data$all.actors.movies);
IMDB.getUniqueCharactersForPerson("nm0000136"); # Johnny Depp
imdb=imdb.data$all.movies.actors.characters
str(imdb)
nmid = "nm0000136"
rows = imdb[imdb$nmid==nmid, ];
rows
na.omit( unique(rows$character) );
IMDB.getUniqueCharactersForPerson = function(nmid, imdb=imdb.data$all.movies.actors.characters )
{
rows = imdb[imdb$nmid==nmid, ];
na.omit( unique(rows$character) );
}
IMDB.getUniqueCharactersForPerson("nm0000136"); # Johnny Depp
characters = na.omit( rows$character );
characters = table( na.omit( rows$character ) );
characters
as.data.frame( table( na.omit( rows$character ) ) );
IMDB.getUniqueCharactersForPerson = function(nmid, imdb=imdb.data$all.movies.actors.characters )
{
rows = imdb[imdb$nmid==nmid, ];
characters = as.data.frame( table( na.omit( rows$character ) ) );
colnames(characters) = c("character","count");
characters;
}
IMDB.getUniqueCharactersForPerson("nm0000136"); # Johnny Depp
moveColumnsInDataFrame(characters, "count", "before", "character");
moveColumnsInDataFrame(characters, "character", "after", "count");
characters = as.data.frame( table( na.omit( rows$character ) ) )[c(2,1),];
colnames(characters) = c("count","character");
characters
rows = imdb[imdb$nmid==nmid, ];
characters = as.data.frame( table( na.omit( rows$character ) ) )[,c(2,1)];
colnames(characters) = c("count","character");
characters;
sortDataFrameByNumericColumns(characters,"count");
IMDB.getUniqueCharactersForPerson = function(nmid, imdb=imdb.data$all.movies.actors.characters )
{
rows = imdb[imdb$nmid==nmid, ];
characters = as.data.frame( table( na.omit( rows$character ) ) )[,c(2,1)];
colnames(characters) = c("count","character");
sortDataFrameByNumericColumns(characters,"count");
}
IMDB.getUniqueCharactersForPerson(IMDB.searchPersonName("Frank Oz")$nmid[1]);
Frank.Oz = IMDB.getUniqueCharactersForPerson(IMDB.searchPersonName("Frank Oz")$nmid[1]);
Frank.Oz; # looks better inside RStudio
View(Frank.Oz)
setwd("C:/_git_/MonteShaffer/imdb")
